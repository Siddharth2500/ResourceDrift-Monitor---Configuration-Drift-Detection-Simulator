# -*- coding: utf-8 -*-
"""ResourceDrift-Monitor — Configuration Drift Detection Simulator

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1y1sEyvWd3UiDWmKNrdVAn4E3hqiXSSDK
"""

# ============================================================
# ResourceDrift-Monitor — Configuration Drift Detection Simulator (Colab ready)
# ============================================================

import os
import json
import random
from datetime import datetime, timezone

# Configuration
DECLARED_FILE = "data/declared_resources.json"
ACTUAL_FILE = "data/actual_resources.json"
DRIFT_REPORT = "data/drift_report.json"

# Simulate required directories
os.makedirs(os.path.dirname(DECLARED_FILE), exist_ok=True)
os.makedirs(os.path.dirname(ACTUAL_FILE), exist_ok=True)

# Generate dummy declared resources if missing
if not os.path.exists(DECLARED_FILE):
    declared = []
    for i in range(1, 51):
        declared.append({
            "resource_id": f"res-{i:03}",
            "type": random.choice(["vm_instance","storage_bucket","database"]),
            "region": random.choice(["us-east-1","eu-west-1","ap-south-1"]),
            "tags": {
                "owner": random.choice([f"team{random.randint(1,5)}","unknown"]),
                "environment": random.choice(["dev","test","prod"])
            }
        })
    with open(DECLARED_FILE, "w", encoding="utf-8") as f:
        json.dump(declared, f, indent=2)

# Generate dummy actual resources if missing
if not os.path.exists(ACTUAL_FILE):
    actual = []
    # include most declared, plus some unexpected, and some missing
    for i in range(1, 60):  # more actual than declared
        actual.append({
            "resource_id": f"res-{i:03}",
            "type": random.choice(["vm_instance","storage_bucket","database","orphan_resource"]),
            "region": random.choice(["us-east-1","eu-west-1","ap-south-1"]),
            "tags": {
                "owner": random.choice([f"team{random.randint(1,5)}","orphan"]),
                "environment": random.choice(["dev","test","prod","legacy"])
            }
        })
    with open(ACTUAL_FILE, "w", encoding="utf-8") as f:
        json.dump(actual, f, indent=2)

def load_json(path):
    with open(path, "r", encoding="utf-8") as f:
        return json.load(f)

def find_declared_map(declared_list):
    return {d["resource_id"]: d for d in declared_list}

def detect_drift(declared, actual):
    declared_map = find_declared_map(declared)
    drift = {
        "timestamp": datetime.now(timezone.utc).isoformat(),
        "total_declared": len(declared),
        "total_actual": len(actual),
        "missing_resources": [],
        "unexpected_resources": [],
        "mismatched_attributes": []
    }
    # Check for missing in actual
    for res_id, dec in declared_map.items():
        if res_id not in {a["resource_id"] for a in actual}:
            drift["missing_resources"].append(res_id)
    # Check for unexpected
    for act in actual:
        if act["resource_id"] not in declared_map:
            drift["unexpected_resources"].append(act["resource_id"])
        else:
            dec = declared_map[act["resource_id"]]
            # Compare type, region, tags
            if act["type"] != dec["type"] or act["region"] != dec["region"] or act["tags"] != dec["tags"]:
                drift["mismatched_attributes"].append({
                    "resource_id": act["resource_id"],
                    "declared": dec,
                    "actual": act
                })
    return drift

def run_drift_audit(declared_path, actual_path, output_path):
    declared = load_json(declared_path)
    actual = load_json(actual_path)
    drift_report = detect_drift(declared, actual)
    with open(output_path, "w", encoding="utf-8") as f:
        json.dump(drift_report, f, indent=2)
    return drift_report

if __name__ == "__main__":
    report = run_drift_audit(DECLARED_FILE, ACTUAL_FILE, DRIFT_REPORT)
    print("✅ Drift audit complete:", report)